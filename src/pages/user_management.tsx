import Head from "next/head";
import Container from "~/components/Container";
import Header from "~/components/Header";
import React, { useState } from "react";
import Router from "next/router";
import { api } from "~/utils/api";
import { Footer } from "~/components/Footer";

export default function ClientManagement() {
  const [selectedClientId, setSelectedClientId] = useState(0);
  const [selectedUserId, setSelectedUserId] = useState("");

  const { data: userData } = api.user.getUsers.useQuery();
  const { data: clientData } = api.client.getClients.useQuery();
  const { data: usersToClientsData } = api.client.getUsersToClients.useQuery();

  const { mutate: addUserToClientRelation } =
    api.client.addUsersToClientsRelation.useMutation({
      onSuccess: () => {
        void Router.push("/client_management");
      },
    });

  const handleAddUserToClientRelation = () => {
    if (!selectedClientId || !selectedUserId) {
      return;
    }

    try {
      addUserToClientRelation({
        clientId: selectedClientId,
        userId: selectedUserId,
      });
      console.log("User added to client relation");
    } catch (error) {
      console.error(error);
    }
  };

  return (
    <>
      <Head>
        <title>User Management</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-primary">
        <Header />
        <Container>
          <h1 className="text-3xl font-bold">User Management</h1>
          <div className="my-2 flex border border-gray-500 p-2">
            <div className="my-2 w-1/3">
              <label
                htmlFor="client"
                className="block text-sm font-medium leading-6 text-gray-900"
              >
                Client
              </label>
              <select
                id="client"
                name="client"
                autoComplete="client-name"
                onChange={(e) => setSelectedClientId(parseInt(e.target.value))}
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6"
              >
                <option value={0}>Select a client</option>
                {clientData?.map((client) => (
                  <option key={client.id} value={client.id}>
                    {client.clientName}
                  </option>
                ))}
              </select>
            </div>
            <div className="my-2 w-1/3">
              <label
                htmlFor="user"
                className="block text-sm font-medium leading-6 text-gray-900"
              >
                User Name
              </label>
              <select
                id="user"
                name="user"
                autoComplete="user-name"
                onChange={(e) => setSelectedUserId(e.target.value)}
                className="block w-full rounded-md border-0 py-1.5 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:max-w-xs sm:text-sm sm:leading-6"
              >
                <option value="">Select a user</option>
                {userData?.map((user) => (
                  <option key={user.id} value={user.id}>
                    {user.name}
                  </option>
                ))}
              </select>
            </div>
            <div className="my-2 w-1/3 pt-4">
              <button onClick={() => void handleAddUserToClientRelation()}>
                Submit
              </button>
            </div>
          </div>

          <table className="min-w-full divide-y divide-gray-200">
            <thead>
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                  Client
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium uppercase tracking-wider text-gray-500">
                  User
                </th>
              </tr>
            </thead>
            <tbody>
              {usersToClientsData?.map((userToClient) => (
                <tr key={userToClient.client.id + userToClient.user.id}>
                  <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">
                    {userToClient.client.clientName}
                  </td>
                  <td className="whitespace-nowrap px-6 py-4 text-sm font-medium text-gray-900">
                    {userToClient.user.name}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </Container>
        <Footer />
      </main>
    </>
  );
}
