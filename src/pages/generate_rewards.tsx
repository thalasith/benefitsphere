import Head from "next/head";
import { useState, useEffect } from "react";
import Container from "~/components/Container";
import { Footer } from "~/components/Footer";
import Header from "~/components/Header";
import { useSession } from "next-auth/react";
import { Button } from "~/components/ui/button";
import { api } from "~/utils/api";
import { CustomSelect } from "~/components/CustomSelect";
import { Checkbox } from "~/components/ui/checkbox";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "~/components/ui/table";
import { Textarea } from "~/components/ui/textarea";
import Link from "next/link";

export default function GenerateRewards() {
  const { data: sessionData } = useSession();
  const [step, setStep] = useState(1);
  const [country, setCountry] = useState("");
  const [loading, setLoading] = useState(false);
  const [chosenPlans, setChosenPlans] = useState<number[]>([]);

  const { data: clientData } = api.client.getClientDetailsById.useQuery({
    clientId: sessionData?.user.activeClient ?? 0,
  });

  const { data: countryData } =
    api.country.getCountryRelationsByClientId.useQuery({
      clientId: sessionData?.user.activeClient ?? 0,
    });
  const countries = countryData?.map((country) => country.country ?? "") ?? [];
  const generateCountryRewards = api.reward.createCountryRewards.useMutation();
  const { data: riskPlans, refetch: refetchRiskPlans } =
    api.riskPlan.getRiskPlanDetailsByCountryAndClientId.useQuery(
      { country: country, clientId: sessionData?.user.activeClient ?? 0 },
      { enabled: false },
    );

  const { data: rewardsData, refetch: refetchRewardsData } =
    api.reward.getRewardsByClientIdAndCountry.useQuery(
      { country: country, clientId: sessionData?.user.activeClient ?? 0 },
      { enabled: false },
    );

  const fetchRiskPlans = async () => {
    try {
      console.log("fetching risk plans...");
      await refetchRiskPlans();
    } catch (error) {
      console.error(error);
    }
  };

  const fetchRewardsPlans = async () => {
    try {
      console.log("fetching rewards plans...");
      await refetchRewardsData();
    } catch (error) {
      console.error(error);
    }
  };

  console.log("rewardsData", rewardsData);

  useEffect(() => {
    if (step === 2) {
      setLoading(true);
      fetchRiskPlans()
        .catch(console.error)
        .finally(() => setLoading(false));
    }
    if (step === 1 && country !== "") {
      console.log("triggered on step 1");
      refetchRewardsData()
        .catch(console.error)
        .finally(() => setLoading(false));
    }
  }, [step, country]);

  const handleFirstStep = () => {
    if (rewardsData === undefined || rewardsData.length === 0) {
      setStep(2);
    } else {
      setStep(3);
    }
  };

  const handleGenerateCountryRewards = async () => {
    try {
      console.log("Generating test...");
      const test = await generateCountryRewards.mutateAsync({
        planIds: chosenPlans,
        country: country,
        clientId: sessionData?.user.activeClient ?? 0,
      });
      console.log(test);
    } catch (error) {
      console.error(error);
    }
  };

  const handleBoxCheck = (id: number) => {
    if (chosenPlans.includes(id)) {
      setChosenPlans(chosenPlans.filter((planId) => planId !== id));
    } else {
      setChosenPlans([...chosenPlans, id]);
    }
  };

  return (
    <>
      <Head>
        <title>Benefitsphere - Generate Rewards Page</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="text-primary">
        <Header />
        <Container>
          <div className="flex items-center justify-between">
            <h1 className="text-3xl font-bold">Generate Rewards Page</h1>
          </div>
          <p className="mt-4 text-lg">This page is used to generate rewards.</p>

          {step === 1 && (
            <div className="mt-8">
              <h2 className="mb-2 text-xl font-bold">
                Step 1: Choose a country
              </h2>
              <CustomSelect
                placeholder="Select Benefit"
                options={countries}
                value={country}
                setValue={setCountry}
              />
              <Button
                onClick={() => handleFirstStep()}
                className="mt-4 bg-primary"
              >
                Next
              </Button>
            </div>
          )}
          {(riskPlans ?? []).length > 0 && step != 1 && (
            <div className="mt-8">
              <h2 className="mb-2 text-xl font-bold">Step 2: Choose plans</h2>

              <Table>
                <TableCaption>
                  A list of {clientData?.clientName}&apos;s benefits.
                </TableCaption>
                <TableHeader>
                  <TableRow>
                    <TableHead className="w-[100px]">Id</TableHead>
                    <TableHead>Plan Name</TableHead>
                    <TableHead>Coverage Type</TableHead>
                    <TableHead className="text-center">Check</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {riskPlans?.map((riskPlan, idx) => (
                    <TableRow key={riskPlan.id}>
                      <TableCell>{idx + 1}</TableCell>
                      <TableCell>{riskPlan.planName}</TableCell>
                      <TableCell>{riskPlan.coverageType}</TableCell>
                      <TableCell>
                        <Checkbox
                          className="text-center"
                          onCheckedChange={() => handleBoxCheck(riskPlan.id)}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
              <Button
                onClick={() => handleGenerateCountryRewards()}
                className="mt-4 bg-primary"
              >
                Next
              </Button>
            </div>
          )}

          {(riskPlans ?? []).length === 0 && step != 1 && (
            <div className="mt-4">
              You don&apos;t have any data to generate rewards with. Please go{" "}
              <Link href="/homepage" className="text-danger">
                here
              </Link>{" "}
              to add some data.
            </div>
          )}
          {loading && <div>Loading...</div>}
        </Container>
        <Footer />
      </main>
    </>
  );
}
